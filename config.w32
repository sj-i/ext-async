ARG_ENABLE('async', 'async support', 'yes');

if (PHP_ASYNC != 'no') {
	AC_DEFINE('HAVE_ASYNC', 1, 'async support enabled');

	ADD_FLAG('CFLAGS', '/I ' + configure_module_dirname);
	ADD_FLAG('CFLAGS', '/I ' + configure_module_dirname + '\\include');
	ADD_FLAG('CFLAGS', '/I ' + configure_module_dirname + '\\thirdparty\\libuv\\include');
	
	ADD_FLAG('LDFLAGS', '/NODEFAULTLIB:LIBCMT');
		
	var async_source_files = [
		'php_async.c',
		'src\\fiber.c',
		'src\\fiber_winfib.c',
		'src\\awaitable.c',
		'src\\context.c',
		'src\\deferred.c',
		'src\\helper.c',
		'src\\process.c',
		'src\\signal_watcher.c',
		'src\\stream.c',
		'src\\stream_watcher.c',
		'src\\task.c',
		'src\\task_scheduler.c',
		'src\\tcp.c',
		'src\\timer.c'
	];
	
	var async_header_files = [
		'php_async.h',
		'thirdparty\\libuv\\include\\uv.h'
	];
	
	// Use pre-built libuv from async extension.
	CHECK_LIB('libuv-x64.lib', 'async', configure_module_dirname + '\\thirdparty');
	
	// Required in order to link against libuv.
	CHECK_LIB("Ws2_32.lib", 'async');
	CHECK_LIB("psapi.lib", 'async');
	CHECK_LIB("Iphlpapi.lib", 'async');
	CHECK_LIB('Userenv.lib', 'async');

	PHP_INSTALL_HEADERS('ext/async', async_header_files.join(' '));

	var ret = SETUP_OPENSSL('async', PHP_ASYNC);
	
	if (ret > 0) {
		MESSAGE('Enabling SSL support for ext\\async: ' + ret);
		AC_DEFINE("HAVE_ASYNC_SSL", 1);
	}

	EXTENSION('async', async_source_files.join(' '), PHP_ASYNC_SHARED, '/DZEND_ENABLE_STATIC_TSRMLS_CACHE=1');
}
